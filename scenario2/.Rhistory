l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern))
iter <- as.numeric(str_match(text, iter_pattern)[1, 2])
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "(?=epoch:(\\s+))\\d+"
iter_pattern <- "iter:\\s+(\\d+,\\d+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern))
iter <- as.numeric(str_match(text, iter_pattern)[1, 2])
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "(?=epoch:\\s+)\\d+"
iter_pattern <- "iter:\\s+(\\d+,\\d+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern))
iter <- as.numeric(str_match(text, iter_pattern)[1, 2])
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
View(result)
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*(\\d+,\\d+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- as.numeric(str_match(text, iter_pattern)[1, 2])
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*(\\d*),(\\d*)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- as.numeric(str_match(text, iter_pattern)[1, 2])
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
iter_pattern <- "iter:\\s*([\\d,]+)"
as.numeric(str_match(text, iter_pattern)
)
str_match(text, iter_pattern)
text = df[100,]
str_match(text, iter_pattern)
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*([\\d,]+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- as.numeric(str_match(text, iter_pattern)[1, 2])
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*([\\d,]+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- str_match(text, iter_pattern)[1, 2]
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
?gsub
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*([\\d,]+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- str_match(text, iter_pattern)[1, 2]
iter <- as.numeric(gsub(",", "", iter))
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
result <- na.omit(result)
library(ggplot2)
ggplot(data = result, aes(x = epoch, y = l_g_pix)) +
geom_line
ggplot(data = result, aes(x = epoch, y = l_g_pix)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_pix)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_percep)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_gan)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_d_fake)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = out_d_fake)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_pix)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_percep)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_gan)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_d_fake)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = out_d_fake)) +
geom_line()
View(result)
ggplot(data = result, aes(x = epoch, y = out_d_fake)) +
geom_line()
View(df)
data= read.delim("D:/college/year_2/Ying_Lab/暑假modify/loss_pic/train_finetune_RealESRGANx4plus_400k_20240701_100253.log")
trans = data[829:1340,]
View(data)
df = as.data.frame(trans)
View(df)
trans = data[829:890,]
df = as.data.frame(trans)
head(df)
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*([\\d,]+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- str_match(text, iter_pattern)[1, 2]
iter <- as.numeric(gsub(",", "", iter))
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
library(stringr)
library(dplyr)
# 定义一个函数来解析每个单元格的文本
parse_cell <- function(text) {
# 使用正则表达式提取各部分信息
date_pattern <- "(\\d{4}-\\d{2}-\\d{2})"
time_pattern <- "(\\d{2}:\\d{2}:\\d{2},\\d+)"
info_pattern <- "INFO"
epoch_pattern <- "epoch:\\s*(\\d+)"
iter_pattern <- "iter:\\s*([\\d,]+)"
lr_pattern <- "lr:\\((\\d+\\.\\d+e[-+]?\\d+)"
l_g_pix_pattern <- "l_g_pix:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_percep_pattern <- "l_g_percep:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_g_gan_pattern <- "l_g_gan:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_real_pattern <- "l_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_real_pattern <- "out_d_real:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
l_d_fake_pattern <- "l_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
out_d_fake_pattern <- "out_d_fake:\\s+([-+]?\\d+\\.\\d+e[-+]?\\d+)"
date <- str_match(text, date_pattern)[1, 1]
time <- str_match(text, time_pattern)[1, 1]
info <- str_detect(text, info_pattern)
epoch <- as.numeric(str_match(text, epoch_pattern)[1, 2])
iter <- str_match(text, iter_pattern)[1, 2]
iter <- as.numeric(gsub(",", "", iter))
lr <- as.numeric(str_match(text, lr_pattern)[1, 2])
l_g_pix <- as.numeric(str_match(text, l_g_pix_pattern)[1, 2])
l_g_percep <- as.numeric(str_match(text, l_g_percep_pattern)[1, 2])
l_g_gan <- as.numeric(str_match(text, l_g_gan_pattern)[1, 2])
l_d_real <- as.numeric(str_match(text, l_d_real_pattern)[1, 2])
out_d_real <- as.numeric(str_match(text, out_d_real_pattern)[1, 2])
l_d_fake <- as.numeric(str_match(text, l_d_fake_pattern)[1, 2])
out_d_fake <- as.numeric(str_match(text, out_d_fake_pattern)[1, 2])
return(data.frame(date, time, info, epoch, iter, lr, l_g_pix, l_g_percep, l_g_gan, l_d_fake, out_d_fake))
}
result = data.frame()
for (i in 1:length(df[,1])){
result = rbind(result,parse_cell(df[i,]))
}
result <- na.omit(result)
View(result)
library(ggplot2)
ggplot(data = result, aes(x = epoch, y = l_g_pix)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_percep)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_g_gan)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = l_d_fake)) +
geom_line()
ggplot(data = result, aes(x = epoch, y = out_d_fake)) +
geom_line()
#BiocManager::install("DiffBind")
library(DiffBind)
?dba.plotPCA()
tinytex::uninstall_tinytex()
tinytex::tlmgr_path
tinytex::tlmgr_path()
tinytex::check_installed()
tinytex::is_tinytex()
library(DiffBind)
?dba.contrast
source("D:/college/year_3/CMML/place-cell model.R", echo=TRUE)
source("D:/college/year_3/CMML/place-cell model.R", echo=TRUE)
source("D:/college/year_3/CMML/place distance cells combined model.R", echo=TRUE)
# p5 = read.csv("fixed_start-wall_p-0.004_5.csv")[,2:7]
# p6 = read.csv("fixed_start-wall_p-0.004_6.csv")[,2:7]
# p7 = read.csv("fixed_start-wall_p-0.004_7.csv")[,2:7]
# p8 = read.csv("fixed_start-wall_p-0.004_8.csv")[,2:7]
# p9 = read.csv("fixed_start-wall_p-0.004_9.csv")[,2:7]
# p10 = read.csv("fixed_start-wall_p-0.004_10.csv")[,2:7]
#
# all = rbind(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10)
#
# write.csv(all,"fixed_start-wall_p-0.004.csv")
getwd()
options(repos = c(CRAN = "https://cran.r-project.org"))
install.packages("Matrix", type = "binary")
# 🔧 可选：使用 BiocManager 安装 Bioconductor 包
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
installed_pkgs <- installed.packages()[, "Package"]
results <- data.frame(
Package = installed_pkgs,
Loadable = NA,
Error = NA,
Fixed = NA,
stringsAsFactors = FALSE
)
for (i in seq_along(installed_pkgs)) {
pkg <- installed_pkgs[i]
message("🔍 Checking package: ", pkg)
# 👇 测试能否加载 namespace（不触发library加载）
tryCatch({
loadNamespace(pkg, quietly = TRUE)
results$Loadable[i] <- TRUE
results$Fixed[i] <- TRUE
}, error = function(e) {
results$Loadable[i] <- FALSE
results$Error[i] <- conditionMessage(e)
# ❗ 加载失败，尝试修复
message("❌ Failed to load namespace for ", pkg, ", trying to reinstall...")
tryCatch({
install.packages(pkg, type = "binary")  # 尽量用 binary 更安全
loadNamespace(pkg, quietly = TRUE)
results$Fixed[i] <- TRUE
message("✅ Reinstall succeeded: ", pkg)
}, error = function(e2) {
results$Fixed[i] <- FALSE
results$Error[i] <- paste0("Install failed: ", conditionMessage(e2))
message("❌ Still failed: ", pkg)
})
})
}
setwd("D:/college/year_3/CMML/ICA2/scenario1")
source("D:/college/year_3/CMML/ICA2/scenario1/fastMNN_evaluation.R", echo=TRUE)
source("D:/college/year_3/CMML/ICA2/scenario1/Harmony_evaluation.R", echo=TRUE)
source("D:/college/year_3/CMML/ICA2/scenario1/scvi_evaluation.R", echo=TRUE)
scales::hue_pal()(n_levels)
colors <- DiscretePalette(n_levels)
colors <- DiscretePalette(all_celltypes)
setwd("D:/college/year_3/CMML/ICA2/scenario2")
library(ggplot2)
library(patchwork)
library(readr)
library(colorspace)
library(RColorBrewer)
library(Polychrome)  # if not installed, run: install.packages("Polychrome")
library(scales)
# === Step 1: Load UMAP data
umap_files <- c(
raw       = "umap_raw.rds",
seurat    = "umap_seurat_integrated.rds",
scvi      = "umap_scvi.rds",
fastmnn   = "umap_fastmnn.rds",
harmony   = "umap_harmony.rds"
)
dfs <- lapply(umap_files, read_rds)
# === Step 2: Smart palette generator function
auto_palette_dimplot <- function(values) {
pal <- hue_pal()(length(values))
setNames(pal, values)
}
colors <- DiscretePalette(all_celltypes)
# === Step 3: Build palettes for cell types and batches
all_celltypes <- sort(unique(unlist(lapply(dfs, \(d) d$cell_type))))
all_batches   <- sort(unique(unlist(lapply(dfs, \(d) d$batch))))
colors <- DiscretePalette(all_celltypes)
colors <- DiscretePalette(len(all_celltypes))
colors <- DiscretePalette(length(all_celltypes))
# === Step 6: Create cell type plots
plots_type <- list(
plot_umap(dfs$raw,     "cell_type", "Raw",     colors),
plot_umap(dfs$seurat,  "cell_type", "Seurat",  colors),
plot_umap(dfs$scvi,    "cell_type", "scVI",    colors),
plot_umap(dfs$fastmnn, "cell_type", "fastMNN", colors),
plot_umap(dfs$harmony, "cell_type", "Harmony", colors)
)
source("D:/college/year_3/CMML/ICA2/scenario1/plot_UMAP.R", echo=TRUE)
source("D:/college/year_3/CMML/ICA2/scenario1/plot_UMAP.R", echo=TRUE)
